{"version":3,"sources":["components/Recipe.js","components/RecipesList.js","components/RecipeInfo.js","components/layout/Header.js","components/SearchBar.js","components/IngredientList.js","components/App.js","serviceWorker.js","index.js"],"names":["card","borderRadius","borderStyle","borderWidth","width","backgroundColor","borderColor","imageStyle","marginLeft","marginRight","Recipe","props","recipe","title","image","id","className","style","onClick","getRecipe","src","alt","RecipesList","recipes","map","key","RecipeInfo","console","log","instructions","marginTop","headerStyle","background","color","textAlign","paddingBottom","paddingTop","marginBottom","Header","SearchBar","useState","ingredients","setIngredients","onSubmit","e","preventDefault","type","name","placeholder","value","onChange","target","marginInput","IngredientList","list","ingredient","listElement","ingredientId","listButton","removeIngredient","listStyle","length","searchRecipe","listStyleType","position","right","top","App","setRecipes","recipeData","setRecipeData","recipePage","setRecipePage","classsName","index","filter","url_ingredients","join","Axios","get","then","res","data","recipeId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f01d9d26.chunk.js","sourcesContent":["import React from 'react';\n\n// export class Recipe extends Component {\n    \n//     render() {\n//         const {title, image, sourceUrl} = this.props.recipe;\n//         // console.log(this.props.recipe);\n\n//         return (\n//             <div className=\"col-md-3\" style={card}>\n//                 <a href={sourceUrl}>\n//                     <h4>{title}</h4>\n//                     <div><img style={imageStyle} src={image} alt={title} /></div>\n//                 </a>\n//             </div>\n//         )\n//     }\n// }\n\nconst card = {\n    borderRadius: '10px',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    width: '30%',\n    backgroundColor: '#cccccc',\n    borderColor: '#cccccc'\n}\n\nconst imageStyle = {\n    width: '90%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n}\n\n\nexport default function Recipe(props) {\n    const {title, image, id} = props.recipe;\n\n    // const [sourceUrl, setSourceUrl] = useState('');\n    // useEffect(() => {\n        \n    //     Axios.get(`https://api.spoonacular.com/recipes/${id}/information?includeNutrition=false&apiKey=0223a4514ad04e749eb86a5d4adf474a`)\n    //         .then(res => {\n    //             console.log('hello', res.data);\n    //             setSourceUrl(res.data.sourceUrl);\n    //         })\n        \n    // }, [])\n\n    // `https://api.spoonacular.com/recipes/${recipe.id}/information?includeNutrition=false&apiKey=0223a4514ad04e749eb86a5d4adf474a `\n    return (\n        <div className=\"col-md-4 m-3\" style={card} onClick={ () => props.getRecipe(id)}>\n            <h4>{title}</h4>\n            <div><img style={imageStyle} src={image} alt={title} /></div>\n        </div>\n    )\n}\n","import React from 'react'\nimport Recipe from './Recipe'\n\n// export class RecipesList extends Component {\n\n//     render() {\n//         // return this.props.recipes.map( recipe => (\n//         //     <Recipe key={recipe.id} recipe={recipe} />\n//         // ));\n//         return(\n//             <div className=\"row\">\n//                 {this.props.recipes.map( recipe => \n//                     <Recipe key={recipe.id} recipe={recipe} />\n//                 )}\n//             </div>\n//         );\n//     }\n// }\n\n// export default RecipesList\n\nexport default function RecipesList(props) {\n\n    \n\n    const recipes = props.recipes.map(recipe => \n        <Recipe key={recipe.id} recipe={recipe} getRecipe = { props.getRecipe } />\n    );\n\n    return (\n        <div className=\"row\">\n            {recipes}\n        </div>\n    )\n}","import React from 'react'\n\nexport default function RecipeInfo(props) {\n    console.log(props);\n    return (\n        <div className=\"row justify-content-center\">\n            <div className=\"card m-2\" style={card}>\n                <h1 className=\"col-12 mt-3\">{props.recipe.title}</h1>\n                <div className=\"row m-3\">\n                    <div className=\"col-5 mb-3\"><img style={imageStyle} src={props.recipe.image} alt={props.recipe.title}/></div>\n                    <div className=\"col-7 \">{props.recipe.instructions}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst card = {\n    borderRadius: '10px',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    width: '70%',\n    backgroundColor: '#cccccc',\n    borderColor: '#cccccc',\n    marginTop: '3rem'\n}\n\nconst imageStyle = {\n    width: '100%',\n    marginLeft: 'auto',\n    marginRight: 'auto'\n}","import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1 style={title}>Recipe</h1>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#000000',\n    color: '#fff',\n    textAlign: 'center',\n    paddingBottom: '2px',\n    paddingTop:'0.1px',\n    marginBottom: '25px',\n}\n\nconst title = {\n    marginBottom: '15px'\n}\n\nexport default Header;","import React, { useState } from 'react'\n\n// export class SearchBar extends Component {\n//     state = {\n//         ingredients: '',\n//     }\n\n    \n//     onChange = e => this.setState({ingredients: e.target.value});\n\n//     onSubmit = e => {\n//         e.preventDefault();\n//         this.props.ingredients(this.state.ingredients);\n//         this.setState({ingredients: [] });\n//     }\n\n//     render() {\n//         return (\n//             <div>\n//                 <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\n//                     <input type=\"text\" \n//                         name=\"ingredients\" \n//                         placeholder=\"Add ingredients\" \n//                         style={{flex: '10', padding: '5px'}} \n//                         value={this.state.ingredients} onChange={this.onChange} />\n//                         <input type=\"submit\" value=\"Add Ingredient\" className=\"btn\" style={{flex: '1'}} />\n//                 </form>            \n//             </div>\n//         )\n//     }\n// }\n\n// export default SearchBar\nexport default function SearchBar(props) {\n    const [ingredients, setIngredients] = useState('');\n\n    function onChange(e) {\n        setIngredients(e.target.value);\n    }\n\n    function onSubmit(e) {\n        e.preventDefault();\n        if(ingredients !== '') {\n        props.ingredients(ingredients);\n        setIngredients([]);\n        }\n    }\n\n    return (\n        <div className=\"row\">\n            <form className=\"row justify-content-center\" onSubmit={onSubmit} >\n                    <input type=\"text\" \n                        name=\"ingredients\" \n                        placeholder=\"Add ingredients\" \n                        className=\"col-md-6 col-md-offset-2\"\n                        value={ingredients} onChange={onChange} \n                    />\n                    <input type=\"submit\" value=\"Add Ingredient\" className=\"btn btn-primary col-md-2\" style={marginInput} />\n                \n            </form>            \n        </div>\n    )\n}\n\nconst marginInput = {\n    marginLeft: '0.5rem'\n}","import React from 'react'\n\n// export class IngredientList extends Component {\n    \n    \n    \n//     render() {\n//         console.log(this.props.list);\n\n//         return (\n//             <div>\n//                 <ul>\n//                 {this.props.list.map((ingredient) => \n//                     <li>{ingredient}</li>\n//                 )}\n//                 </ul>\n//                 <button onClick={this.props.searchRecipe} >Search Recipe</button>\n//             </div>\n//         )\n//     }\n// }\n\n// export default IngredientList\n\nexport default function IngredientList(props) {\n    console.log(props.list);\n    const list = props.list.map(ingredient => \n        <li style={listElement} key={ingredient.ingredientId} className=\"list-group-item list-group-item-success\">\n            {ingredient.ingredient}\n                <button style={listButton} onClick={() => props.removeIngredient(ingredient.ingredientId)} className=\"btn btn-danger\">X</button>\n        </li>\n    );\n\n    return (\n        <div className=\"\">\n            <div className=\"row\">\n                <ul className=\"list-group mt-3 col-md-4\" style={listStyle}>\n                        {list}\n                </ul>\n            </div>\n            {props.list.length > 0 && (\n            <span className=\"row\">\n                <button onClick={props.searchRecipe} className=\"btn btn-success col-md-2 mt-2\" >Search Recipe</button>\n            </span>\n            )}\n        </div>\n    )\n}\n\nconst listStyle = {\n    listStyleType: \"none\",\n}\n\nconst listButton = {\n    position: 'absolute',\n    right: '10px',\n    top: '3px'\n}\n\nconst listElement = {\n    paddingTop: '10px',\n    paddingBottom: '10px',\n}","import React, { useState } from 'react';\nimport RecipesList from './RecipesList'\nimport RecipeInfo from './RecipeInfo'\nimport Header from './layout/Header'\nimport SearchBar from './SearchBar'\nimport Axios from 'axios';\nimport IngredientList from './IngredientList'\n\nlet ingredientId = 0;\n\nexport default function App() {\n  const [ingredients, setIngredients] = useState([]);\n  const [recipes, setRecipes] = useState([]);\n\n  const [recipeData, setRecipeData] = useState({});\n  const [recipePage, setRecipePage] = useState(false);\n\n  function addIngredients(ingredient) {\n    ingredientId++;\n    setIngredients(ingredients => [...ingredients, {ingredient, ingredientId}]);\n  }\n\n  function searchRecipe() {\n    let url_ingredients = ingredients.map((index) => `${index.ingredient}`).join(',');\n    console.log(url_ingredients);\n    Axios.get(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${url_ingredients}&apiKey=0223a4514ad04e749eb86a5d4adf474a `)\n      .then(res => {\n        console.log('recipes set', res.data);\n        \n        setRecipes(res.data)\n        setRecipePage(false);\n      })\n  }\n\n  function removeIngredient(index) {\n    setIngredients(ingredients.filter(ingredient => ingredient.ingredientId !== index));\n  }\n\n  function getRecipe(recipeId) {\n    Axios.get(`https://api.spoonacular.com/recipes/${recipeId}/information?includeNutrition=false&apiKey=0223a4514ad04e749eb86a5d4adf474a`)\n      .then(res => {\n        setRecipeData(res.data);\n        setRecipePage(true);\n      })\n  }\n  \n  return (\n    <div classsName=\"\">\n      <Header/>\n      <div className=\"container\">\n        \n        <SearchBar ingredients= {addIngredients} />\n        <IngredientList list = {ingredients} removeIngredient = {removeIngredient} searchRecipe = {searchRecipe} />\n        \n        {\n          !recipePage && \n          (<RecipesList recipes = {recipes} getRecipe = {getRecipe} />)\n        }\n        \n        {recipePage && (<RecipeInfo recipe = {recipeData} />)}\n      </div>\n    </div>\n  )\n  \n\n}\n// class App extends React.Component {\n\n//     state = {\n//       ingredients: [],\n//       recipes: []\n//     }\n\n//     addIngredients = ingredient => {\n//         this.setState({ingredients: [...this.state.ingredients, ingredient]});\n//         console.log(this.state.ingredients);\n//     }\n\n//     searchRecipe = () => {\n        \n//         let ingredients = this.state.ingredients;\n//         let url_ingredients = ingredients.map((index) => `${index}`).join(',');\n//         console.log(url_ingredients);\n//         Axios.get(`https://api.spoonacular.com/recipes/findByIngredients?ingredients=${url_ingredients}&apiKey=40fc2345992540f0be8fd7b73b307777`)\n//           .then(res => {\n//             // console.log(res.data);\n//             // this.setState({recipes: res.data})\n//             let recipes = res.data;\n//             this.getRecipeUrl(recipes);\n//           })\n//     }\n\n//     getRecipeUrl = recipes => {\n\n//         for(let recipe of recipes) {\n//             Axios.get(`https://api.spoonacular.com/recipes/${recipe.id}/information?includeNutrition=false&apiKey=40fc2345992540f0be8fd7b73b307777`)\n//               .then(res => {\n//                 console.log('ulr',res.data.sourceUrl);\n//                 console.log('recipe', recipe);\n//                 const data = {\n//                   title:recipe.title,\n//                   image:recipe.image,\n//                   sourceUrl:res.data.sourceUrl,\n//                 };\n//                 this.setState({recipes: this.state.recipes.concat(data)})\n//               })\n//         }\n//     }\n    \n    \n\n\n\n\n//     render() {\n//         return (\n//             <div className=\"App container-fuild\">\n//               <Header/>\n//               <SearchBar ingredients= {this.addIngredients} />\n//               <IngredientList list = {this.state.ingredients} searchRecipe = {this.searchRecipe} />\n//               <RecipesList className=\"row\" recipes = {this.state.recipes} />\n//             </div>\n//         )\n//     }\n// }\n\n// export default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}